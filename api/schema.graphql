interface Actor implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  name: String
  profilePicture: Image
  joined: String
}

type Comment implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  text: String
}

"""A connection to a list of items."""
type CommentConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [CommentEdge!]!
}

"""An edge in a connection."""
type CommentEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Comment!
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

type Image {
  url(width: Int = null, height: Int = null): String!
}

type LikeStoryMutationResponse {
  story: Story!
}

type Location {
  name: String!
}

type Mutation {
  likeStory(id: String!, doesLike: Boolean!): LikeStoryMutationResponse!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
}

type Organization implements Actor & Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  name: String
  profilePicture: Image
  joined: String
  organizationKind: OrganizationKind
}

enum OrganizationKind {
  COMMERCIAL
  NONPROFIT
  GOVERNMENT
  JOURNALISTIC
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Person implements Actor & Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  name: String
  profilePicture: Image
  joined: String
  email: String
  location: Location
}

type Query {
  node(
    """The ID of the object."""
    id: GlobalID!
  ): Node!
  topStory: Story
  topStories: [Story!]!
  viewer: Viewer!
}

type Story implements Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
  createdAt: String!
  title: String!
  summary: String!
  updatedAt: String!
  attachments: [Image!]!
  thumbnail: Image
  likeCount: Int
  doesViewerLike: Boolean
  poster: Actor!
  comments(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): CommentConnection!
}

"""A connection to a list of items."""
type StoryConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [StoryEdge!]!
}

"""An edge in a connection."""
type StoryEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Story!
}

type Viewer {
  actor: Actor!
  contacts(search: String = null): [Actor!]!
  newsfeedStories(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): StoryConnection!
}
